/**
 * Kettle-Project-Toolbox project pipeline build script
 * deplloy version in 
 * @see https://github.com/xiaoyao9184/Kettle-Project-Toolbox/blob/master/jenkins/deploy_kpt_project.jenkinsfile
 * @see https://github.com/xiaoyao9184/Kettle-Project-Toolbox-Jenkins-Shared-Libraries/blob/master/jenkinsfile/deploy_kpt_project.jenkinsfile
 * Created by xiaoyao9184 on 2019/1/7.
 */

//Note:
//1. install job-dsl file-operation plugins
//2. change parameters default for linux or windows system
//3. script approval 
//4. disable script security for Job DSL

pipeline {
    agent any
    parameters {
        string(name: 'ProjectName', description: 'project name!')
        
        //windows path
        string(name: 'PDIPath', defaultValue: 'D:\\Program\\Kettle\\data-integration', description: 'data-integration directory')
        string(name: 'KPTPath', defaultValue: 'D:\\Program\\Kettle\\Kettle-Project-Toolbox', description: 'Kettle-Project-Toolbox directory')
        string(name: 'ArchivePath', defaultValue: 'D:\\Archive', description: 'archive directory!')
        string(name: 'DeployPath', defaultValue: 'D:\\Program\\ETL', description: 'project directory!')
        
        //linux path
        // string(name: 'PDIPath', defaultValue: '/home/jenkins/kettle/data-integration', description: 'data-integration directory')
        // string(name: 'KPTPath', defaultValue: '/home/jenkins/kettle/kettle-project-toolbox', description: 'Kettle-Project-Toolbox directory')
        // string(name: 'ArchivePath', defaultValue: '/home/jenkins/archive', description: 'archive directory!')
        // string(name: 'DeployPath', defaultValue: '/home/jenkins/etl', description: 'project directory!')
        
        string(name: 'DeployProfile', defaultValue: 'dev', description: 'active profile!')
        string(name: 'PDIURL', defaultValue: 'https://jaist.dl.sourceforge.net/project/pentaho/Data%20Integration/7.1/pdi-ce-7.1.0.0-12.zip', description: 'The PDI URL!')
    }
    options {
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }
    stages {
        
        // ready

        stage('Create info') {
            steps {
                script {
                    flow = [
                        updateKPT: false,
                        downloadPDI: false,
                        applyPatch: false,
                        activeProfile: false,
                        addJenkinsJob: false
                    ]
                    archive = [
                        path: "${params.ArchivePath}",
                        file: null,
                        version: null
                    ]
                    info = [
                        workPath: null,
                        projectPath: null,
                        projectName: "${params.ProjectName}"
                    ]

                    if (isUnix()) {
                        archive."path" = "${archive.path}".replace("\\", "/")
                        info."PDIPath" = params.PDIPath.replace("\\", "/")
                        info."KPTPath" = params.KPTPath.replace("\\", "/")
                        info."DeployPath" = params.DeployPath.replace("\\", "/")
                    } else {
                        archive."path" = "${archive.path}".replace("/", "\\")
                        info."PDIPath" = params.PDIPath.replace("/", "\\")
                        info."KPTPath" = params.KPTPath.replace("/", "\\")
                        info."DeployPath" = params.DeployPath.replace("/", "\\")
                    }
                }
            }
        }

        stage('Check PDI and KPT[Unix]') {
            when { 
                expression { isUnix() }
            }
            steps {
                script {
                    //update KPT when not exist or KPT path is manage by git
                    flow."updateKPT" = sh(
                        script: """
                        [ -d "${info.KPTPath}" ] && [ ! -d "${info.KPTPath}/.git" ] && echo "false" || echo "true"
                        """, 
                        returnStdout: true).trim().toBoolean()
                    //download PDI with not exist
                    flow."downloadPDI" = sh(
                        script: """
                        [ -d "${info.PDIPath}" ] && echo "false" || echo "true"
                        """, 
                        returnStdout: true).trim().toBoolean()
                }
            }
        }
        stage('Check PDI and KPT[Windows]') {
            when { 
                expression { !isUnix() }
            }
            steps {
                script {
                    //update KPT when not exist or KPT path is manage by git
                    flow."updateKPT" = bat(
                        script: """
                        @echo off
                        if exist "${info.KPTPath}" (
                            if exist "${info.KPTPath}\\.git" (
                                echo true
                            ) else (
                                echo false
                            )
                        ) else (
                            echo true
                        )
                        """, 
                        returnStdout: true).trim().toBoolean()
                    //download PDI with not exist
                    flow."downloadPDI" = bat(
                        script: """
                        @echo off
                        if exist "${info.PDIPath}" (
                            echo false
                        ) else (
                            echo true
                        )
                        """, 
                        returnStdout: true).trim().toBoolean()
                }
            }
        }

        stage('Update KPT') {
            when { 
                expression { flow.updateKPT }
            }
            steps {
                dir("${info.KPTPath}") {
                    echo 'Update KPT...'
                    git branch: 'master',
                        url: 'https://github.com/xiaoyao9184/Kettle-Project-Toolbox.git'
                }
            }
        }

        stage('Download PDI') {
            when { 
                expression { flow.downloadPDI }
            }
            steps {
                echo 'Download PDI...'
                fileOperations([
                    fileDownloadOperation(
                        url: "${params.PDIURL}",
                        targetFileName: 'pdi-ce.zip',
                        targetLocation: "${WORKSPACE}",
                        userName: '',
                        password: ''),
                    fileUnZipOperation(
                        filePath: 'pdi-ce.zip',
                        targetLocation: "."),
                    folderCopyOperation(
                        destinationFolderPath: "${params.PDIPath}",
                        sourceFolderPath: './data-integration'),
                    folderDeleteOperation(
                        './data-integration'),
                    folderDeleteOperation(
                        './pdi-ce.zip')
                ])
            }
        }

        // build

        stage('[Build]Checkout') {
            steps {
                dir("${params.ProjectName}") {
                    checkout scm
                }
            }
        }

        stage('[Build]Link[Unix]') {
            when { 
                expression { isUnix() && info.projectName }
            }
            steps {
                sh """
                bash "${info.KPTPath}/tool/LINK_KPT.sh" "\$(pwd)" "${info.PDIPath}" <&-
                """
            }
        }
        stage('[Build]Link[Windows]') {
            when { 
                expression { !isUnix() && info.projectName }
            }
            steps {
                bat """
                call "${info.KPTPath}\\tool\\LINK_KPT.bat" "%cd%" "${info.PDIPath}"
                """
            }
        }

        stage('[Build]Package[Unix]') {
            when { 
                expression { isUnix() && info.projectName }
            }
            steps {
                sh """
                bash "\$(pwd)/tool/ZIP_DEPLOY_PATH.sh" "\$(pwd)/${info.projectName}" <&-
                """
            }
        }
        stage('[Build]Package[Windows]') {
            when { 
                expression { !isUnix() && info.projectName }
            }
            steps {
                bat """
                call %cd%\\tool\\ZIP_DEPLOY_PATH.bat %cd%\\${info.projectName}
                """
            }
        }

        stage('[Build]Archive[Unix]') {
            when { 
                expression { isUnix() && info.projectName }
            }
            steps {
                script {
                    archive."path" = "${archive.path}/${info.projectName}"
                    archive."file" = sh(
                        script: "find . -name '\\[Deploy\\]${info.projectName}*.zip' -print", 
                        returnStdout: true).trim()
                    archive."version" = sh(
                        script: "basename \$(find . -name '\\[Deploy\\]${info.projectName}*.zip' -print) .zip", 
                        returnStdout: true).trim()

                    if (!archive.file) {
                        echo "No archive file!"
                        archive = null
                        currentBuild.result = 'FAILURE'
                    }
                }
                echo "Archive path is: ${archive.path}"
                echo "Archive file is: ${archive.file}"
                echo "Archive version is: ${archive.version}"
                sh """
                [ -d "${archive.path}" ] || mkdir -p "${archive.path}"
                mv "${archive.file}" "${archive.path}/"
                """
            }
        }
        stage('[Build]Archive[Windows]') {
            when { 
                expression { !isUnix() && info.projectName }
            }
            steps {
                script {
                    archive."path" = "${archive.path}\\${info.projectName}"
                    archive."file" = bat(
                        script: "@echo off & FOR %%F IN ([Deploy]${info.projectName}*.zip) DO echo %%~nxF", 
                        returnStdout: true).trim()
                    archive."version" = bat(
                        script: "@echo off & FOR %%F IN ([Deploy]${info.projectName}*.zip) DO echo %%~nF", 
                        returnStdout: true).trim()

                    if (!archive.file) {
                        echo "No archive file!"
                        archive = null
                        currentBuild.result = 'FAILURE'
                    }
                }
                echo "Archive path is: ${archive.path}"
                echo "Archive file is: ${archive.file}"
                echo "Archive version is: ${archive.version}"
                bat """
                IF NOT EXIST "${archive.path}" MKDIR "${archive.path}"
                MOVE /y "${archive.file}" "${archive.path}"
                """
            }
        }

        
        // deploy

        stage('[Deploy]Check archive info') {
            steps {
                script {
                    if (!info.projectName) {
                        echo "No 'ProjectName' param!"
                        archive = null
                        currentBuild.result = 'UNSTABLE'
                    } else if (!archive) {
                        echo "No archive info!"
                        archive = null
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        
        stage('[Deploy]Create workspace info[Unix]') {
            when { 
                expression { return isUnix() && archive }
            }
            steps {
                script {
                    println 'Create workspace info...'
                    info."workPath" = "${info.DeployPath}/${archive.version}"
                    info."projectPath" = "${info.workPath}/${info.projectName}"
                    
                    def projectPathExists = sh(
                        script: """
                        [ -d "${info.projectPath}" ] && echo "true" || echo "false"
                        """, 
                        returnStdout: true).trim().toBoolean()
                    if (projectPathExists) {
                        println "Deploy target path already exists ${info.projectPath}, skip it!"
                        archive = null
                    } else {
                        println "Deploy project path is: ${info.projectPath}"
                    }
                }
            }
        }
        stage('[Deploy]Create workspace info[Windows]') {
            when { 
                expression { return !isUnix() && archive }
            }
            steps {
                script {
                    println 'Create workspace info...'
                    info."workPath" = "${info.DeployPath}\\${archive.version}"
                    info."projectPath" = "${info.workPath}\\${info.projectName}"
                    
                    def projectPathExists = bat(
                        script: """
                        @echo off
                        if exist "${info.projectPath}" (
                            echo true
                        ) else (
                            echo false
                        )
                        """, 
                        returnStdout: true).trim().toBoolean()
                    if (projectPathExists) {
                        println "Deploy target path already exists ${info.projectPath}, skip it!"
                        archive = null
                    } else {
                        println "Deploy project path is: ${info.projectPath}"
                    }
                }
            }
        }

        stage('[Deploy]Release archive to project path') {
            when { 
                expression { return archive } 
            }
            steps {
                dir("${info.projectPath}") {
                    echo 'Checkout project...'
                    checkout scm
                }
            }
        }

        stage('[Deploy]Check project[Unix]') {
            when { 
                expression { return isUnix() && archive } 
            }
            steps {
                echo 'Check project path...'
                script {
                    def profileFileExists = sh(
                        script: """
                        [ -f "${info.projectPath}/.profile/.profile" ] && echo "true" || echo "false"
                        """, 
                        returnStdout: true).trim().toBoolean()

                    if (profileFileExists && params.DeployProfile) {
                        flow."activeProfile" = true
                        println 'Profile needs to be activated!'
                    }

                    def patchFileExists = sh(
                        script: """
                        [ -f "${info.projectPath}/patch.PatchPDI.sh" ] && echo "true" || echo "false"
                        """, 
                        returnStdout: true).trim().toBoolean()
                    if (patchFileExists) {
                        flow."applyPatch" = true
                        println 'Patch needs to be applied!'
                    }

                    def jenkinsPathExists = sh(
                        script: """
                        [ -d "${info.projectPath}/jenkins" ] && echo "true" || echo "false"
                        """, 
                        returnStdout: true).trim().toBoolean()
                    if (jenkinsPathExists) {
                        flow."addJenkinsJob" = true
                        println 'JenkinsJob needs to be added!'
                    }
                }
            }
        }
        stage('[Deploy]Check project[Windows]') {
            when { 
                expression { return !isUnix() && archive } 
            }
            steps {
                echo 'Check project path...'
                script {
                    def profileFileExists = bat(
                        script: """
                        @echo off
                        if exist "${info.projectPath}\\.profile\\.profile" (
                            echo true
                        ) else (
                            echo false
                        )
                        """, 
                        returnStdout: true).trim().toBoolean()

                    if (profileFileExists && params.DeployProfile) {
                        flow."activeProfile" = true
                        println 'Profile needs to be activated!'
                    }

                    def patchFileExists = bat(
                        script: """
                        @echo off
                        if exist "${info.projectPath}\\patch.PatchPDI.bat" (
                            echo true
                        ) else (
                            echo false
                        )
                        """, 
                        returnStdout: true).trim().toBoolean()
                    if (patchFileExists) {
                        flow."applyPatch" = true
                        println 'Patch needs to be applied!'
                    }

                    def jenkinsPathExists = bat(
                        script: """
                        @echo off
                        if exist "${info.projectPath}\\jenkins" (
                            echo true
                        ) else (
                            echo false
                        )
                        """, 
                        returnStdout: true).trim().toBoolean()
                    if (jenkinsPathExists) {
                        flow."addJenkinsJob" = true
                        println 'JenkinsJob needs to be added!'
                    }
                }
            }
        }

        stage('[Deploy]Link PDI and KPT[Unix]') {
            when { 
                expression { return isUnix() && archive } 
            }
            steps {
                echo 'Link PDI and KPT...'
                sh "bash ${params.KPTPath}/tool/LINK_KPT.sh ${info.workPath} ${info.PDIPath} <&-" 
            }
        }
        stage('[Deploy]Link PDI and KPT[Windows]') {
            when { 
                expression { return !isUnix() && archive } 
            }
            steps {
                echo 'Link PDI and KPT...'
                bat "call ${params.KPTPath}\\tool\\LINK_KPT.bat ${info.workPath} ${info.PDIPath}"
            }
        }

        stage('[Deploy]Apply PDI patch[Unix]') {
            when { 
                expression { return isUnix() && archive && flow.applyPatch } 
            }
            steps {
                dir("${info.projectPath}") {
                    echo 'Apply PDI patch...'
                    sh 'bash patch.PatchPDI.sh <&-'
                }
            }
        }
        stage('[Deploy]Apply PDI patch[Windows]') {
            when { 
                expression { return !isUnix() && archive && flow.applyPatch } 
            }
            steps {
                dir("${info.projectPath}") {
                    echo 'Apply PDI patch...'
                    bat 'call patch.PatchPDI.bat'
                }
            }
        }
        
        stage('[Deploy]Active project profile[Unix]') {
            when { 
                expression { return isUnix() && archive && flow.activeProfile } 
            }
            steps {
                dir("${info.projectPath}") {
                    echo 'Active project profile...'
                    sh """
                    mv "./.profile/.profile" "./.profile/${params.DeployProfile}.profile"
                    """
                }
            }
        }
        stage('[Deploy]Active project profile[Windows]') {
            when { 
                expression { return !isUnix() && archive && flow.activeProfile } 
            }
            steps {
                dir("${info.projectPath}") {
                    echo 'Active project profile...'
                    bat """
                    cd ".profile"
                    REN ".profile" "${params.DeployProfile}.profile"
                    """
                }
            }
        }

        stage('[Deploy]Add Jenkins scheduling job') {
            when { 
                expression { return archive && flow.addJenkinsJob } 
            }
            steps {
                dir("${info.projectPath}") {
                    echo 'Add Jenkins scheduling job...'
                    jobDsl(
                        targets: "jenkins/deploy_kpt_project_jenkinsfile.groovy", 
                        removedJobAction: 'DELETE', 
                        removedViewAction: 'DELETE',
                        additionalParameters: [
                            ProjectPath: "${info.projectPath}"
                        ],
                        lookupStrategy: 'SEED_JOB',
                        sandbox: false
                    )
                }
            }
        }
    }
    post {
        cleanup {
            deleteDir()
        }
    }
}
